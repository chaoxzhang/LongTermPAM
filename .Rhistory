save.path = getwd(),# it is better to modify this to your local path
site.lat =61.84562, # hyytiala latitude
site.lon = 24.29077, # hyytiala longitude
local.tz = 'EET', # time zone of Finland
tz.summer =  3,
tz.winter = 2,
measure.time = 'winter' # In Hyytiala forest station, we always use winter time
)
#read the head information into R, remember your saved-data path
head.timerange<-read.csv("preprocesPAM_head_timerange_2016_2017.dat",header = T,sep = ';')
#print this head and tree information
head.timerange
# read preprocesPAM_2014_2015.dat into R using fread from data.table package
preproces.20162017<-fread('preprocesPAM_2016_2017.dat')
# arrange the preproces.20162017 data to correct data format using formatPAMdata function from this package
preproces.20162017<-formatPAMdata(preproces.20162017)
# correct tree_num
preproces.20162017<-
preproces.20162017 %>%
subset(tree_num!='Unknow1'&tree_num!='Unknow2'&tree_num!='Pine2LOW') %>%
droplevels() %>%
mutate(head_tree=paste0(head,'_',tree_num))
# check tree_num
levels(preproces.20162017$tree_num) # we can see now 'Unknow1', 'Unknow2' and 'Pine2LOW' are removed
# check data
head(preproces.20162017)
preproces.20162017<-preproces.20162017 %>% subset(datetime>ymd_hms('2016-11-05 12:00:00'))
# check the data now
head(preproces.20162017)
preproces.20162017.correctF<-correctF(preproces.20162017)
# write.table function from R
# I call it corrected data, because usually we need correct head and tree info for our Hyytiala data
write.table(preproces.20162017.correctF,file='corrected2016-2017.dat',row.names = F,sep = ';')
# This is only an example, you can decide where the cleaned/filtered data and visualized figure will be saved
# Function to create a directory if it doesn't exist
create_dir_if_not_exists <- function(dir_name) {
if (!dir.exists(dir_name)) {
dir.create(dir_name, recursive = TRUE)  # recursive = TRUE ensures that any necessary parent directories are created
}
}
# Create a folder for saving all the data
create_dir_if_not_exists('saved data')
# Create a new folder to save data visualization figures
create_dir_if_not_exists('figures')
# Create subfolders to save different data visualization figures
create_dir_if_not_exists('figures/figure_raw_data')
create_dir_if_not_exists('figures/figure_filter_step')
create_dir_if_not_exists('figures/figure_diurnal_parameters')
create_dir_if_not_exists('figures/figure_seasonal_parameters')
# read organized and corrected MONIPAM data for data cleaning
# fread function from data.table package
flag0<-fread("corrected2016-2017.dat",stringsAsFactors = T)
# This is only an example, you can decide where the cleaned/filtered data and visualized figure will be saved
# there is no fieldnote data for 2016-2017
#define folder for saving the data and plots
save.fitlerFigure.path<-'figures/figure_filter_step'
save.filterData.path<-'saved data'
save.seasonalFigure.path<-'figures/figure_seasonal_parameters'
# first, let's see how fvfm from original data varies across whole observing season
# calculate FvFm using FindFvFm and check data by plotting fvfm data
flag0.fvfm<-  FindFvFm(PAM.data=flag0,save.path = save.filterData.path,
save.title = 'Flag 0',save.file=T)
# plot and save to local folder
plotFvFm(flag0.fvfm, plot.title = 'Flag 0 fvfm',
save.path=save.seasonalFigure.path,fieldnote = F)
# visulize original data  using plotRawData() function
plotRawData(flag0, fieldnote = F,plot.title = 'with sunlight time',save.path = save.rawdataFigure.path)
# cleaning data steps 1 to 6**
flag1.lowF<-filter1.lowF(PAM.data=flag0,save.path=save.filterData.path,
save.file=T)
flag1.fvfm<-FindFvFm(flag1.lowF, save.filterData.path,'Flag 1',save.file=T)
plotFvFm(flag1.fvfm,plot.title = 'Flag 1 fvfm',save.path = save.seasonalFigure.path,
fieldnote = F)
plotCheckfilter(newdata=flag1.lowF,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f2.fm from 0.01 to 0.1 by a 0.01 interval
# f2.fmYII = 3 usually is a good setting, you can just try to adjust f2.fm
flag2.night<-filter2.night(flag1.lowF,f2.fm=0.05,f2.fmYII=3,
save.filterData.path,save.file = T)
flag2.fvfm<-FindFvFm(flag2.night, save.filterData.path,'Flag 2',save.file=T)
plotFvFm(flag2.fvfm,plot.title = 'Flag 2 fvfm',fieldnote = F,
save.path= save.seasonalFigure.path)
plotCheckfilter(newdata=flag2.night,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f3.YII from 0.01 to 0.1 by a 0.01 interval
# adjust f3.fm from 0.05 to 0.3 by a 0.05 interval
# f3.fmYII = 3 usually is a good setting, you can just try to adjust f3.YII and f3.fm
flag3.day<-
filter3.day(flag2.night,f3.YII=0.02,f3.fm=0.1,f3.fmYII = 3,
save.path =save.filterData.path,save.file = T)
flag3.fvfm<-
FindFvFm(flag3.day, save.filterData.path,'Flag 3',save.file=T)
plotFvFm(flag3.fvfm,plot.title = 'Flag 3 fvfm',fieldnote = F,
save.path =  save.seasonalFigure.path)
plotCheckfilter(newdata=flag3.day,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f4.fm from 0.05 to 0.3 by a 0.05 interval
# f4.fmYII = 3 usually is a good setting, you can just try to adjust f4.fm
flag4.FvFm<-
filter4.FvFm(flag3.day,save.file = T,f4.fm=0.15,f4.fmYII=3,
save.path = save.filterData.path)
flag4.fvfm<-
FindFvFm(flag4.FvFm,save.filterData.path,'Flag 4',save.file=T)
plotFvFm(flag4.fvfm,plot.title = 'Flag 4 fvfm',fieldnote = F,
save.path= save.seasonalFigure.path)
plotCheckfilter(newdata=flag4.FvFm,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f5.fm from 0.1 to 0.3 by a 0.05 interval
# f5.fmYII = 3 usually is a good setting, you can just try to adjust f5.fm
flag5.expand<-filter5.expand(flag4.FvFm,save.file = T,
save.path = save.filterData.path,
f5.fm = 0.2,f5.fmYII = 3)
flag5.fvfm<-
FindFvFm(flag5.expand,save.filterData.path,'Flag 5',save.file=T)
plotFvFm(flag5.fvfm,plot.title = 'Flag 5 fvfm',fieldnote = F,
save.path=save.seasonalFigure.path)
plotCheckfilter(newdata=flag5.expand,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust expand.time  according your data recording interval, 60 mins here for this example include 2 measurement points
flag6.adjacent<-filter6.adjacent(flag5.expand,save.file = T,
save.path = save.filterData.path,
expand.time = 60)
flag6.fvfm<-
FindFvFm(flag6.adjacent,save.filterData.path,'Flag 6',save.file=T)
plotFvFm(flag6.fvfm,plot.title = 'Flag 6 fvfm',fieldnote = F,
save.path=save.seasonalFigure.path)
plotCheckfilter(newdata=flag6.adjacent,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
FmR.df<-ChlFRef(raw.fvfm = flag0.fvfm,filter.fvfm = flag6.fvfm,
FvFmR = 0.83,save.file = T,save.path = 'figures/figure_FmR_FoR')
FmR.df
diurn.para<-diurnalParams(filtered.data = flag6.adjacent,
filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(diurn.para)
seas.para<-seasonalParams(filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(seas.para)
plotSeasonPara(season.param = seas.para,
save.path = 'figures/figure_seasonal_parameters',
fieldnote = F)
# plot and save rate constant parameter figure to local folder
# PQ,NPQ,NPQr
plotDiurnRateConstant(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quenching parameter figure to local folder
#qLT and qLr
plotQuench(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quantum yield parameter figure to local folder
# Phi_PQ(Yield),Phi_NPQ,Phi_fD
plotYield(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save NPQ yield parameter figure to local folder
# Phi_NPQ,Phi_NPQr,Phi_NPQs
plotNPQYield(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
#read the head information into R, remember your saved-data path
head.timerange<-read.csv("preprocesPAM_head_timerange_2014_2015.dat",header = T,sep = ';')
#print this head and tree information
head.timerange
# read preprocesPAM_2014_2015.dat into R using fread from data.table package
preproces.20142015<-fread('preprocesPAM_2014_2015.dat')
# arrange the preproces.20142015 data to correct data format using formatPAMdata function from this package
preproces.20142015<-formatPAMdata(preproces.20142015)
# correct tree_num
preproces.20142015<-
preproces.20142015 %>%
#tree_num is confirmed by checking field-note data of measuring season 2014-2015
#see: data(fieldnote_for_plot)
mutate(tree_num=case_when(
head==6~'T7TOP',
head==11~'T7LOW',
head==14~'T6LOW',
head==22~'T5TOP',
head==25~'T6TOP'
)) %>%
mutate(tree_num=as.factor(tree_num)) %>%
mutate(head_tree=paste0(head,'_',tree_num))
# check tree_num
levels(preproces.20142015$tree_num)
# check data
head(preproces.20142015)
preproces.20142015<-
preproces.20142015 %>%
subset(datetime>ymd_hms('2014-08-28 12:00:00'))
# check the data now
View(preproces.20142015)
# write.table function from R
# I call it corrected data, because usually we need correct head and tree info for our Hyytiala data
write.table(preproces.20142015,file='corrected2014-2015.dat',row.names = F,sep = ';')
# fread function from data.table package
flag0<-fread("corrected2014-2015.dat",stringsAsFactors = T)
# first, let's see how fvfm from original data varies across whole observing season
# calculate FvFm using FindFvFm and check data by plotting fvfm data
flag0.fvfm<-  FindFvFm(PAM.data=flag0,save.path = save.filterData.path,
save.title = 'Flag 0',save.file=T)
# plot and save to local folder
plotFvFm(flag0.fvfm, plot.title = 'Flag 0 fvfm', fieldnote=T,fieldnote.data = fieldnote,
save.path=save.seasonalFigure.path)
# visulize original data  using plotRawData() function
plotRawData(flag0, fieldnote =  T,fieldnote.data = fieldnote,plot.title = 'with sunlight time',save.path = save.rawdataFigure.path)
# visulize original data  using plotRawData() function
plotRawData(flag0, fieldnote =  T,fieldnote.data = fieldnote,plot.title = 'with sunlight time',save.path = save.rawdataFigure.path)
# filter1.lowF
flag1.lowF<-filter1.lowF(PAM.data=flag0,save.path=save.filterData.path,
save.file=T)
#check fvfm after filter step 1
flag1.fvfm<-FindFvFm(flag1.lowF, save.filterData.path,'Flag 1',save.file=T)
# plot and save fvfm figure to local folder
plotFvFm(flag1.fvfm,plot.title = 'Flag 1 fvfm',fieldnote = T,fieldnote.data = fieldnote,
save.path = save.seasonalFigure.path)
#visualize data filtering
plotCheckfilter(newdata=flag1.lowF,rawdata=flag0,fieldnote = T,
fieldnote.data = fieldnote_2014_2015,
save.path=save.fitlerFigure.path)
# adjust f2.fm from 0.01 to 0.1 by a 0.01 interval
# fmYII = 3 usually is a good setting, you can just try to adjust f2.fm
flag2.night<-
filter2.night(flag1.lowF,f2.fm=0.05,f2.fmYII=3,
save.path=save.filterData.path,save.file = T)
flag2.fvfm<-
FindFvFm(flag2.night, save.filterData.path,'Flag 2',save.file=T)
plotFvFm(flag2.fvfm,plot.title = 'Flag 2 fvfm',save.path = save.seasonalFigure.path,
fieldnote = T,fieldnote.data = fieldnote)
plotCheckfilter(newdata=flag2.night,rawdata=flag0,fieldnote = T,
save.path=save.fitlerFigure.path,fieldnote.data = fieldnote)
# adjust f3.YII from 0.01 to 0.1 by a 0.01 interval
# adjust f3.fm from 0.05 to 0.3 by a 0.05 interval
# fmYII = 3 usually is a good setting, you can just try to adjust f3.YII and f3.fm
flag3.day<-
filter3.day(flag2.night,f3.YII=0.02,f3.fm=0.1,f3.fmYII = 3,
save.path =save.filterData.path,save.file = T)
flag3.fvfm<-
FindFvFm(flag3.day, save.filterData.path,'Flag 3',save.file=T)
plotFvFm(flag3.fvfm,plot.title = 'Flag 3 fvfm',save.seasonalFigure.path,
fieldnote = T,fieldnote.data = fieldnote)
plotCheckfilter(newdata=flag3.day,rawdata=flag0,fieldnote = T,
save.path=save.fitlerFigure.path,fieldnote.data = fieldnote)
# adjust f4.fm from 0.05 to 0.3 by a 0.05 interval
# f4.fmYII = 3 usually is a good setting, you can just try to adjust f4.fm
flag4.FvFm<-
filter4.FvFm(flag3.day,save.file = T,f4.fm=0.15,f4.fmYII=3,
save.path = save.filterData.path)
flag4.fvfm<-
FindFvFm(flag4.FvFm,save.filterData.path,'Flag 4',save.file=T)
plotFvFm(flag4.fvfm,plot.title = 'Flag 4 fvfm',save.seasonalFigure.path,
fieldnote = T,fieldnote.data = fieldnote)
plotCheckfilter(newdata=flag4.FvFm,rawdata=flag0,fieldnote=T,
save.path=save.fitlerFigure.path,fieldnote.data = fieldnote)
# adjust f5.fm from 0.1 to 0.3 by a 0.05 interval
# f5.fmYII = 3 usually is a good setting, you can just try to adjust f5.fm
flag5.expand<-filter5.expand(flag4.FvFm,save.file = T,
save.path = save.filterData.path,
f5.fm = 0.2,f5.fmYII = 3)
flag5.fvfm<-
FindFvFm(flag5.expand,save.filterData.path,'Flag 5',save.file=T)
plotFvFm(flag5.fvfm,plot.title = 'Flag 5 fvfm',save.seasonalFigure.path,
fieldnote = T,fieldnote.data = fieldnote)
plotCheckfilter(newdata=flag5.expand,rawdata=flag0,fieldnote = T,
save.path=save.fitlerFigure.path,fieldnote.data = fieldnote)
# adjust expand.time  according your data recording interval, 60 mins here for this example include 2 measurement points
flag6.adjacent<-filter6.adjacent(flag5.expand,save.file = T,
save.path = save.filterData.path,
expand.time = 60)
flag6.fvfm<-
FindFvFm(flag6.adjacent,save.filterData.path,'Flag 6',save.file=T)
plotFvFm(flag6.fvfm,plot.title = 'Flag 6 fvfm',save.seasonalFigure.path,
fieldnote = T,fieldnote.data = fieldnote)
plotCheckfilter(newdata=flag6.adjacent,rawdata=flag0,fieldnote=T,
save.path=save.fitlerFigure.path,fieldnote.data = fieldnote)
FmR.df<-ChlFRef(raw.fvfm = flag0.fvfm,filter.fvfm = flag6.fvfm,FvFmR = 0.83,
save.file = T,save.path = 'figures/figure_FmR_FoR')
FmR.df
diurn.para<-diurnalParams(filtered.data = flag6.adjacent,
filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(diurn.para)
seas.para<-seasonalParams(filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(seas.para)
plotSeasonPara(season.param = seas.para,save.path = 'figures/figure_seasonal_parameters',fieldnote = F)
# plot and save rate constant parameter figure to local folder
# PQ,NPQ,NPQr
plotDiurnRateConstant(diurnal.para = diurn.para,
fieldnote = T,fieldnote.data = fieldnote_2014_2015,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quenching parameter figure to local folder
#qLT and qLr
plotQuench(diurnal.para = diurn.para,
fieldnote = T,fieldnote.data = fieldnote_2014_2015,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quantum yield parameter figure to local folder
# Phi_PQ(YII),Phi_NPQ,Phi_fD
plotYield(diurnal.para = diurn.para,
fieldnote = T,fieldnote.data = fieldnote_2014_2015,
save.path = 'figures/figure_diurnal_parameters')
# plot and save NPQ yield parameter figure to local folder
# Phi_NPQ,Phi_NPQr,Phi_NPQs
plotNPQYield(diurnal.para = diurn.para,
fieldnote = T,fieldnote.data = fieldnote_2014_2015,
save.path = 'figures/figure_diurnal_parameters')
# read preprocesPAM_2014_2015.dat into R using fread from data.table package
preproces.20162017<-fread('preprocesPAM_2016_2017.dat')
# arrange the preproces.20162017 data to correct data format using formatPAMdata function from this package
preproces.20162017<-formatPAMdata(preproces.20162017)
# correct tree_num
preproces.20162017<-
preproces.20162017 %>%
subset(tree_num!='Unknow1'&tree_num!='Unknow2'&tree_num!='Pine2LOW') %>%
droplevels() %>%
mutate(head_tree=paste0(head,'_',tree_num))
# check tree_num
levels(preproces.20162017$tree_num) # we can see now 'Unknow1', 'Unknow2' and 'Pine2LOW' are removed
# check data
head(preproces.20162017)
preproces.20162017<-preproces.20162017 %>% subset(datetime>ymd_hms('2016-11-05 12:00:00'))
# check the data now
head(preproces.20162017)
# write.table function from R
# I call it corrected data, because usually we need correct head and tree info for our Hyytiala data
write.table(preproces.20162017,file='corrected2016-2017.dat',row.names = F,sep = ';')
# read organized and corrected MONIPAM data for data cleaning
# fread function from data.table package
flag0<-fread("corrected2016-2017.dat",stringsAsFactors = T)
# This is only an example, you can decide where the cleaned/filtered data and visualized figure will be saved
# there is no fieldnote data for 2016-2017
#define folder for saving the data and plots
save.fitlerFigure.path<-'figures/figure_filter_step'
save.filterData.path<-'saved data'
save.seasonalFigure.path<-'figures/figure_seasonal_parameters'
# first, let's see how fvfm from original data varies across whole observing season
# calculate FvFm using FindFvFm and check data by plotting fvfm data
flag0.fvfm<-  FindFvFm(PAM.data=flag0,save.path = save.filterData.path,
save.title = 'Flag 0',save.file=T)
# plot and save to local folder
plotFvFm(flag0.fvfm, plot.title = 'Flag 0 fvfm',
save.path=save.seasonalFigure.path,fieldnote = F)
# visulize original data  using plotRawData() function
plotRawData(flag0, fieldnote = F,plot.title = 'with sunlight time',save.path = save.rawdataFigure.path)
# cleaning data steps 1 to 6**
flag1.lowF<-filter1.lowF(PAM.data=flag0,save.path=save.filterData.path,
save.file=T)
flag1.fvfm<-FindFvFm(flag1.lowF, save.filterData.path,'Flag 1',save.file=T)
plotFvFm(flag1.fvfm,plot.title = 'Flag 1 fvfm',save.path = save.seasonalFigure.path,
fieldnote = F)
plotCheckfilter(newdata=flag1.lowF,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f2.fm from 0.01 to 0.1 by a 0.01 interval
# f2.fmYII = 3 usually is a good setting, you can just try to adjust f2.fm
flag2.night<-filter2.night(flag1.lowF,f2.fm=0.05,f2.fmYII=3,
save.filterData.path,save.file = T)
flag2.fvfm<-FindFvFm(flag2.night, save.filterData.path,'Flag 2',save.file=T)
plotFvFm(flag2.fvfm,plot.title = 'Flag 2 fvfm',fieldnote = F,
save.path= save.seasonalFigure.path)
plotCheckfilter(newdata=flag2.night,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f3.YII from 0.01 to 0.1 by a 0.01 interval
# adjust f3.fm from 0.05 to 0.3 by a 0.05 interval
# f3.fmYII = 3 usually is a good setting, you can just try to adjust f3.YII and f3.fm
flag3.day<-
filter3.day(flag2.night,f3.YII=0.02,f3.fm=0.1,f3.fmYII = 3,
save.path =save.filterData.path,save.file = T)
flag3.fvfm<-
FindFvFm(flag3.day, save.filterData.path,'Flag 3',save.file=T)
plotFvFm(flag3.fvfm,plot.title = 'Flag 3 fvfm',fieldnote = F,
save.path =  save.seasonalFigure.path)
plotCheckfilter(newdata=flag3.day,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f4.fm from 0.05 to 0.3 by a 0.05 interval
# f4.fmYII = 3 usually is a good setting, you can just try to adjust f4.fm
flag4.FvFm<-
filter4.FvFm(flag3.day,save.file = T,f4.fm=0.15,f4.fmYII=3,
save.path = save.filterData.path)
flag4.fvfm<-
FindFvFm(flag4.FvFm,save.filterData.path,'Flag 4',save.file=T)
plotFvFm(flag4.fvfm,plot.title = 'Flag 4 fvfm',fieldnote = F,
save.path= save.seasonalFigure.path)
plotCheckfilter(newdata=flag4.FvFm,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust f5.fm from 0.1 to 0.3 by a 0.05 interval
# f5.fmYII = 3 usually is a good setting, you can just try to adjust f5.fm
flag5.expand<-filter5.expand(flag4.FvFm,save.file = T,
save.path = save.filterData.path,
f5.fm = 0.2,f5.fmYII = 3)
flag5.fvfm<-
FindFvFm(flag5.expand,save.filterData.path,'Flag 5',save.file=T)
plotFvFm(flag5.fvfm,plot.title = 'Flag 5 fvfm',fieldnote = F,
save.path=save.seasonalFigure.path)
plotCheckfilter(newdata=flag5.expand,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
# adjust expand.time  according your data recording interval, 60 mins here for this example include 2 measurement points
flag6.adjacent<-filter6.adjacent(flag5.expand,save.file = T,
save.path = save.filterData.path,
expand.time = 60)
flag6.fvfm<-
FindFvFm(flag6.adjacent,save.filterData.path,'Flag 6',save.file=T)
plotFvFm(flag6.fvfm,plot.title = 'Flag 6 fvfm',fieldnote = F,
save.path=save.seasonalFigure.path)
plotCheckfilter(newdata=flag6.adjacent,rawdata=flag0,fieldnote = F,
save.path=save.fitlerFigure.path)
FmR.df<-ChlFRef(raw.fvfm = flag0.fvfm,filter.fvfm = flag6.fvfm,
FvFmR = 0.83,save.file = T,save.path = 'figures/figure_FmR_FoR')
FmR.df
diurn.para<-diurnalParams(filtered.data = flag6.adjacent,
filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(diurn.para)
seas.para<-seasonalParams(filtered.fvfm = flag6.fvfm,
# only the FmR and FoR estimated from final filtered
# data will be used to calculate ChlF parameters
FmR.data = FmR.df %>% subset(var=='Filtered data'),
save.file = T,save.path = 'saved data')
names(seas.para)
plotSeasonPara(season.param = seas.para,
save.path = 'figures/figure_seasonal_parameters',
fieldnote = F)
# plot and save rate constant parameter figure to local folder
# PQ,NPQ,NPQr
plotDiurnRateConstant(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quenching parameter figure to local folder
#qLT and qLr
plotQuench(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save quantum yield parameter figure to local folder
# Phi_PQ(Yield),Phi_NPQ,Phi_fD
plotYield(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
# plot and save NPQ yield parameter figure to local folder
# Phi_NPQ,Phi_NPQr,Phi_NPQs
plotNPQYield(diurnal.para = diurn.para,
fieldnote = F,
save.path = 'figures/figure_diurnal_parameters')
View(flag0)
flag0<-fread("corrected2014-2015.dat",stringsAsFactors = T)
View(flag0)
# read preprocesPAM_2014_2015.dat into R using fread from data.table package
preproces.20142015<-fread('preprocesPAM_2014_2015.dat')
# arrange the preproces.20142015 data to correct data format using formatPAMdata function from this package
preproces.20142015<-formatPAMdata(preproces.20142015)
# correct tree_num
preproces.20142015<-
preproces.20142015 %>%
#tree_num is confirmed by checking field-note data of measuring season 2014-2015
#see: data(fieldnote_for_plot)
mutate(tree_num=case_when(
head==6~'T7TOP',
head==11~'T7LOW',
head==14~'T6LOW',
head==22~'T5TOP',
head==25~'T6TOP'
)) %>%
mutate(tree_num=as.factor(tree_num)) %>%
mutate(head_tree=paste0(head,'_',tree_num))
# check tree_num
levels(preproces.20142015$tree_num)
# check data
head(preproces.20142015)
preproces.20142015<-
preproces.20142015 %>%
subset(datetime>ymd_hms('2014-08-28 12:00:00'))
# check the data now
View(preproces.20142015)
preproces.20142015.correctF<-correctF(preproces.20142015)
# write.table function from R
# I call it corrected data, because usually we need correct head and tree info for our Hyytiala data
write.table(preproces.20142015.correctF,file='corrected2014-2015.dat',row.names = F,sep = ';')
# read preprocesPAM_2014_2015.dat into R using fread from data.table package
preproces.20162017<-fread('preprocesPAM_2016_2017.dat')
# arrange the preproces.20162017 data to correct data format using formatPAMdata function from this package
preproces.20162017<-formatPAMdata(preproces.20162017)
# correct tree_num
preproces.20162017<-
preproces.20162017 %>%
subset(tree_num!='Unknow1'&tree_num!='Unknow2'&tree_num!='Pine2LOW') %>%
droplevels() %>%
mutate(head_tree=paste0(head,'_',tree_num))
# check tree_num
levels(preproces.20162017$tree_num) # we can see now 'Unknow1', 'Unknow2' and 'Pine2LOW' are removed
# check data
head(preproces.20162017)
preproces.20162017<-preproces.20162017 %>% subset(datetime>ymd_hms('2016-11-05 12:00:00'))
# check the data now
head(preproces.20162017)
preproces.20162017.correctF<-correctF(preproces.20162017)
# write.table function from R
# I call it corrected data, because usually we need correct head and tree info for our Hyytiala data
write.table(preproces.20162017.correctF,file='corrected2016-2017.dat',row.names = F,sep = ';')
devtools::load_all("C:/Users/zhangcha/OneDrive - University of Helsinki/LongTermPAM")
