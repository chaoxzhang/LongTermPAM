names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
raw.head<-raw.head[!raw.head$head==0,]
raw.head$head<-as.factor(raw.head$head)
raw.head$tree_num<-as.factor(raw.head$tree_num)
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
raw.split.col<-raw.split.col[,c(1:3,6,8:13)]
names(raw.split.col)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.split.col$head<-as.factor(raw.split.col$head)
#in some files, the device was reconnected and tree_num was set
#as same one as previous one, so duplicated head&tree_num can be recorded
raw.remain<-merge(raw.split.col,unique(raw.head[,c('head','tree_num')]),
by='head')
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
View(raw.remain)
filenames[fn]
filenames
fn=12
raw<-read.delim(filenames[fn],header = F)
raw$ID<-1:nrow(raw)
raw$V1<-iconv(raw$V1, to = "UTF-8", sub = "byte")
head.count<-nrow(raw[grep('Device|device',raw$V1),])
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],'V1',sep = ';',type.convert = F)[,8]))
View(raw)
head.count
data.count
treenum.info
raw[grep('Device|device',raw$V1),]
head.num.count
nrow(raw[grep('Device|device',raw$V1),])
newdevice.count
data.count
treenum.info
newdevice.count
head.count
isFALSE(head.count==0)
head.count
if (isFALSE(head.count==0)){
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
}
tree.num.count
tree.num.count
if (isFALSE(head.count==0)){
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
}
tree.num.count
isFALSE(head.count==0)
if (isTRUE(head.count==0)){
#when no head information was recorded
nohead<-
paste(filenames[fn],' is read into the file but this file did not
include header information, please check the file and add the
head information yourself!')
print(nohead)
write.table(nohead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noHeadInfo.txt'))
} else { # when there is a head information, continue following lines
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
}
if (isTRUE(head.count==0)){#when no head information
#was recorded
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.head<-raw.head[!raw.head$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,row.names = F,sep = ';',
file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'))
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
} else if (isTRUE(data.count==0)) {#when no data was recorded
nodata<-paste0(filenames[fn],' did not record the data!')
print(nodata)
write.table(nodata,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noDataRecord.txt'))
} else if (isTRUE(newdevice.count>=1)) {#when new device was added
raw.newhead<-raw[grep('New',raw$V1),]
newhead<-
paste(filenames[fn],' is not read into the file because new device(s)
was (were) added. ','Please open,check and rearrange the file!')
print(newhead);print(as.character(raw.newhead[[1]]))
write.table(newhead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_newDeviceAdded.txt'))
} else if (isTRUE(treenum.info==7)) {
#when no tree_num information was recorded
treeNoDefine <-
paste0(filenames[fn],
' is read into the file but this file did not define tree_num
information,please check the file and add the tree_num
information yourself!')
print(treeNoDefine)
write.table(treeNoDefine,append = T,col.names = F,row.names = F,
file=paste0(save.path,'/rawFile_noTreeDefined.txt'))
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,row.names = F,sep = ';',
file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'))
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
} else if (isTRUE(head.num.count<tree.num.count)){
#when there is less head_number [column 5] than tree_number[column 8],
#which means the new head(device) is added
error<-paste0(filenames[fn],' is not read into the file
because one head has more than one tree_num.
Please open,check and rearrange file!')
print(error)
write.table(error,file = paste0(save.path,'/rawFile_error.txt'),
append = T,col.names = F,row.names = F)
} else {
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.head<-cSplit(raw.head.1col,'V1', sep = ';',type.convert = F)
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
raw.head<-raw.head[!raw.head$head==0,]
raw.head$head<-as.factor(raw.head$head)
raw.head$tree_num<-as.factor(raw.head$tree_num)
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
raw.split.col<-raw.split.col[,c(1:3,6,8:13)]
names(raw.split.col)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.split.col$head<-as.factor(raw.split.col$head)
#in some files, the device was reconnected and tree_num was set
#as same one as previous one, so duplicated head&tree_num can be recorded
raw.remain<-merge(raw.split.col,unique(raw.head[,c('head','tree_num')]),
by='head')
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'),
row.names = F,sep = ';')
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
}
save.path
#was recorded
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
pam.pattern = '.PAM|.pam'
save.path = 'C:/LocalData/zhangcha/MONI-PAM/r-package/7filter/3filter_package_test1'
site.lat =61.84562
site.lon = 24.29077
local.tz = 'EET
tz.summer =  3
source.path='C:/LocalData/zhangcha/MONI-PAM/data/2007'
source.path='C:/LocalData/zhangcha/MONI-PAM/data/2007'
pam.pattern = '.PAM|.pam';
save.path = getwd();# it is better to modify this to your local path
site.lat =61.84562; # hyytiala latitude
site.lon = 24.29077; # hyytiala longitude
local.tz = 'EET'; # time zone of Finland
tz.summer =  3;
tz.winter = 2;
measure.time = 'winter'
filenames<-list.files(path = source.path,pattern=pam.pattern,full.names = T)
shortnames<-gsub(list.files(path =source.path,pattern=pam.pattern),
pattern = pam.pattern,replacement = '')
fn=12
raw<-read.delim(filenames[fn],header = F)
raw$ID<-1:nrow(raw)
raw$V1<-iconv(raw$V1, to = "UTF-8", sub = "byte")
head.count<-nrow(raw[grep('Device|device',raw$V1),])
if (isTRUE(head.count==0)){
#when no head information was recorded
nohead<-
paste(filenames[fn],' is read into the file but this file did not
include header information, please check the file and add the
head information yourself!')
print(nohead)
write.table(nohead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noHeadInfo.txt'))
} else { # when there is a head information, continue following lines
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
}
if (isTRUE(head.count==0)){#when no head information
#was recorded
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.head<-raw.head[!raw.head$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,row.names = F,sep = ';',
file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'))
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
} else if (isTRUE(data.count==0)) {#when no data was recorded
nodata<-paste0(filenames[fn],' did not record the data!')
print(nodata)
write.table(nodata,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noDataRecord.txt'))
} else if (isTRUE(newdevice.count>=1)) {#when new device was added
raw.newhead<-raw[grep('New',raw$V1),]
newhead<-
paste(filenames[fn],' is not read into the file because new device(s)
was (were) added. ','Please open,check and rearrange the file!')
print(newhead);print(as.character(raw.newhead[[1]]))
write.table(newhead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_newDeviceAdded.txt'))
} else if (isTRUE(treenum.info==7)) {
#when no tree_num information was recorded
treeNoDefine <-
paste0(filenames[fn],
' is read into the file but this file did not define tree_num
information,please check the file and add the tree_num
information yourself!')
print(treeNoDefine)
write.table(treeNoDefine,append = T,col.names = F,row.names = F,
file=paste0(save.path,'/rawFile_noTreeDefined.txt'))
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,row.names = F,sep = ';',
file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'))
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
} else if (isTRUE(head.num.count<tree.num.count)){
#when there is less head_number [column 5] than tree_number[column 8],
#which means the new head(device) is added
error<-paste0(filenames[fn],' is not read into the file
because one head has more than one tree_num.
Please open,check and rearrange file!')
print(error)
write.table(error,file = paste0(save.path,'/rawFile_error.txt'),
append = T,col.names = F,row.names = F)
} else {
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.head<-cSplit(raw.head.1col,'V1', sep = ';',type.convert = F)
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
raw.head<-raw.head[!raw.head$head==0,]
raw.head$head<-as.factor(raw.head$head)
raw.head$tree_num<-as.factor(raw.head$tree_num)
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
raw.split.col<-raw.split.col[,c(1:3,6,8:13)]
names(raw.split.col)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.split.col$head<-as.factor(raw.split.col$head)
#in some files, the device was reconnected and tree_num was set
#as same one as previous one, so duplicated head&tree_num can be recorded
raw.remain<-merge(raw.split.col,unique(raw.head[,c('head','tree_num')]),
by='head')
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
write.table(raw.remain,file = paste0(save.path,'/',shortnames[fn],
'_',year(raw.remain$date)[1],'.csv'),
row.names = F,sep = ';')
print(paste0(shortnames[fn],' is saved.'))
return(raw.remain)
}
isTRUE(head.count==0)
#was recorded
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
View(raw.remain)
raw.head<-raw.head[!raw.head$head==0,]
raw.head<-raw.remain[!raw.remain$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
raw.remain
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
raw.head<-raw.remain[!raw.remain$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
#was recorded
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.head<-raw.remain[!raw.remain$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
shortnames
#' organize data function used only for readPAM function
#' @export
organize.PAMdata<-function(data,shortnames,i){
data$date<-ymd(data$YYMMDD)
data$HHMMSS<-str_sub(data$HHMMSS,start = 1,end = 8)
data$datetime<-paste(data$date,data$HHMMSS)
data$filename<-shortnames[i]
data$tree_num<-gsub(pattern = ' ',replacement = '',data$tree_num)
data$tree_num<-suppressWarnings(as.factor(data$tree_num))
#add "^" before and "$" after "-" for F_ and Fm_,
# to make sure only "-" is replaced and the
# negative values will not be deleted
data$F_<-gsub(pattern = '^-$',replacement = NA,data$F_)
data$F_<-suppressWarnings(as.numeric(data$F_))
data$Fm_<-gsub(pattern = '^-$',replacement = NA,data$Fm_)
data$Fm_<-suppressWarnings(as.numeric(data$Fm_))
data$YII<-gsub(pattern = '^-$',replacement = NA,data$YII)
data$YII<-suppressWarnings(as.numeric(data$YII))
data$par_PAM<-gsub(pattern = ' ',replacement = '',data$par_PAM)
data$par_PAM<-suppressWarnings(as.numeric(data$par_PAM))
data$ETR<-gsub(pattern = '-',replacement = NA,data$ETR)
data$ETR<-suppressWarnings(as.numeric(data$ETR))
data$temp_PAM<-gsub(pattern = ' ',replacement = '',data$temp_PAM)
data$temp_PAM<-suppressWarnings(as.numeric(data$temp_PAM))
return(data)
}
raw.split.col<-cSplit(raw,'V1', sep = ';',type.convert = F)
raw.remain<-raw.split.col[,c(1:3,6,8:13)]
names(raw.remain)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.head<-raw.remain[!raw.remain$head==0,]
raw.remain$head<-as.factor(raw.remain$head)
raw.remain$tree_num<-NA
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
filenames
fn=15
raw<-read.delim(filenames[fn],header = F)
raw$ID<-1:nrow(raw)
raw$V1<-iconv(raw$V1, to = "UTF-8", sub = "byte")
head.count<-nrow(raw[grep('Device|device',raw$V1),])
if (isTRUE(head.count==0)){
#when no head information was recorded
nohead<-
paste(filenames[fn],' is read into the file but this file did not
include header information, please check the file and add the
head information yourself!')
print(nohead)
write.table(nohead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noHeadInfo.txt'))
} else { # when there is a head information, continue following lines
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
}
isTRUE(head.count==0)
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
View(raw)
cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)
treenum.info
cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F)
raw<-read.delim(filenames[fn],header = F)
raw$ID<-1:nrow(raw)
raw$V1<-iconv(raw$V1, to = "UTF-8", sub = "byte")
head.count<-nrow(raw[grep('Device|device',raw$V1),])
if (isTRUE(head.count==0)){
#when no head information was recorded
nohead<-
paste(filenames[fn],' is read into the file but this file did not
include header information, please check the file and add the
head information yourself!')
print(nohead)
write.table(nohead,append = T,col.names = F,row.names = F,
file = paste0(save.path,'/rawFile_noHeadInfo.txt'))
} else { # when there is a head information, continue following lines
data.count<-nrow(raw[grep('SG',raw$V1),])
newdevice.count<-nrow(raw[grep('New',raw$V1),])
treenum.info<-length(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep=';',type.convert = F))
head.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,5]))
if (treenum.info==8){
tree.num.count<-nrow(unique(cSplit(raw[grep('Device|device',raw$V1),],
'V1',sep = ';',type.convert = F)[,8]))
} else {
tree.num.count<-0
}
}
tree.num.count
isTRUE(head.count==0)
isTRUE(data.count==0)
isTRUE(newdevice.count>=1
)
isTRUE(head.num.count<tree.num.count)
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.head<-cSplit(raw.head.1col,'V1', sep = ';',type.convert = F)
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
View(raw.head)
raw.head.1col<-raw[grep('Device|device',raw$V1),]
raw.head<-cSplit(raw.head.1col,'V1', sep = ';',type.convert = F)
if (isTRUE(treenum.info==0)){
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE')
raw.head$tree_num<-NA
} else {
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
}
isTRUE(treenum.info==0)
treenum.info
if (isTRUE(treenum.info==7)){
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE')
raw.head$tree_num<-NA
} else {
names(raw.head)<-c('ID','YYMMDD','HHMMSS','PARAMETER',
'head','V2','DEVICE','tree_num')
}
raw.head
raw.head<-raw.head[!raw.head$head==0,]
raw.head$head<-as.factor(raw.head$head)
raw.head$tree_num<-as.factor(raw.head$tree_num)
raw.1col<-raw[grep('SG',raw$V1),]
raw.split.col<-cSplit(raw.1col,'V1', sep = ';',type.convert = F)
View(raw.split.col)
raw.split.col<-raw.split.col[,c(1:3,6,8:13)]
names(raw.split.col)<-c('ID','YYMMDD','HHMMSS','head','F_','Fm_',
'par_PAM','YII','ETR','temp_PAM')
raw.split.col$head<-as.factor(raw.split.col$head)
#in some files, the device was reconnected and tree_num was set
#as same one as previous one, so duplicated head&tree_num can be recorded
raw.remain<-merge(raw.split.col,unique(raw.head[,c('head','tree_num')]),
by='head')
raw.remain<-organize.PAMdata(raw.remain,shortnames,i=fn)
filenames[15]
library(LongTermPAM)
library(devtools)
use_vignette(Intro_to_inhouseCalc’, title=’Introduction to inhouseCalc’)
use_vignette('Intro_to_inhouseCalc', title='Introduction to inhouseCalc')
devtools::load_all("C:/Users/zhangcha/OneDrive - University of Helsinki/LongTermPAM")
use_vignette('Intro_to_inhouseCalc', title='Introduction to inhouseCalc')
use_vignette('Intro_to_LongTermPAM', title='Introduction to LongTermPAM')
# load LongTermPAM package
library(LongTermPAM)
# check the work directory location
getwd()
use_vignette('Intro_to_LongTermPAM', title='Introduction to LongTermPAM')
help(package='LongTermPAM')
library(LongTermPAM)
# load LongTermPAM package
library(LongTermPAM)
# check the work directory location
getwd()
setwd("C:/Users/zhangcha/OneDrive - University of Helsinki/LongTermPAM/vignettes")
use_vignette('Intro_to_LongTermPAM', title='Introduction to LongTermPAM')
devtools::load_all("C:/Users/zhangcha/OneDrive - University of Helsinki/LongTermPAM")
detach('package:LongTermPAM',unload=T)
remove.packages("LongTermPAM")
detach('package:LongTermPAM',unload=T)
install.packages("C:/Users/zhangcha/OneDrive - University of Helsinki/LongTermPAM_0.0.0.9000.tar.gz", repos = NULL, type = "source")
# load LongTermPAM package
library(LongTermPAM)
# check the work directory location
getwd()
??readPAM
??help
??data.table
